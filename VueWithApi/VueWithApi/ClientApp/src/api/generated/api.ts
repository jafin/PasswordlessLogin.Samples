/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppInfo
 */
export interface AppInfo {
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    minimumPasswordStrength?: number;
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    minimumPasswordLength?: number;
    /**
     * 
     * @type {UserInfo}
     * @memberof AppInfo
     */
    user?: UserInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof AppInfo
     */
    permissions?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface AuthenticateInputModel
 */
export interface AuthenticateInputModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateInputModel
     */
    oneTimeCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticateInputModel
     */
    staySignedIn?: boolean;
}
/**
 * 
 * @export
 * @interface AuthenticateLongCodeInputModel
 */
export interface AuthenticateLongCodeInputModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateLongCodeInputModel
     */
    longCode: string;
}
/**
 * 
 * @export
 * @interface AuthenticatePasswordInputModel
 */
export interface AuthenticatePasswordInputModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePasswordInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePasswordInputModel
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticatePasswordInputModel
     */
    staySignedIn?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePasswordInputModel
     */
    nextUrl?: string | null;
}
/**
 * 
 * @export
 * @interface ChangeEmailInputModel
 */
export interface ChangeEmailInputModel {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailInputModel
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailInputModel
     */
    newEmail: string;
}
/**
 * 
 * @export
 * @interface RegisterInputModel
 */
export interface RegisterInputModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterInputModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInputModel
     */
    password?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RegisterInputModel
     */
    claims?: { [key: string]: string; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterInputModel
     */
    setPassword?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegisterInputModel
     */
    nextUrl?: string | null;
}
/**
 * 
 * @export
 * @interface RemovePasswordInputModel
 */
export interface RemovePasswordInputModel {
    /**
     * 
     * @type {string}
     * @memberof RemovePasswordInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RemovePasswordInputModel
     */
    oldPassword?: string | null;
}
/**
 * 
 * @export
 * @interface SendCodeInputModel
 */
export interface SendCodeInputModel {
    /**
     * 
     * @type {string}
     * @memberof SendCodeInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SendCodeInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SendCodeInputModel
     */
    nextUrl?: string | null;
}
/**
 * 
 * @export
 * @interface SendPasswordResetMessageInputModel
 */
export interface SendPasswordResetMessageInputModel {
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetMessageInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetMessageInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetMessageInputModel
     */
    nextUrl?: string | null;
}
/**
 * 
 * @export
 * @interface SetPasswordInputModel
 */
export interface SetPasswordInputModel {
    /**
     * 
     * @type {string}
     * @memberof SetPasswordInputModel
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetPasswordInputModel
     */
    oldPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SetPasswordInputModel
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    isAuthenticated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    email?: string | null;
}

/**
 * AccountApiApi - axios parameter creator
 * @export
 */
export const AccountApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeEmailInputModel} [changeEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountChangeEmailPost: async (changeEmailInputModel?: ChangeEmailInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account/change-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof changeEmailInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(changeEmailInputModel !== undefined ? changeEmailInputModel : {})
                : (changeEmailInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountDatePasswordSetGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account/date-password-set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: Array<object>; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountPatch: async (requestBody?: { [key: string]: Array<object>; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof requestBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                : (requestBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RemovePasswordInputModel} [removePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountRemovePasswordPost: async (removePasswordInputModel?: RemovePasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account/remove-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof removePasswordInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(removePasswordInputModel !== undefined ? removePasswordInputModel : {})
                : (removePasswordInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetPasswordInputModel} [setPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountSetPasswordPost: async (setPasswordInputModel?: SetPasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/my-account/set-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof setPasswordInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(setPasswordInputModel !== undefined ? setPasswordInputModel : {})
                : (setPasswordInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApiApi - functional programming interface
 * @export
 */
export const AccountApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeEmailInputModel} [changeEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel?: ChangeEmailInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountDatePasswordSetGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountDatePasswordSetGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: Array<object>; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountPatch(requestBody?: { [key: string]: Array<object>; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountPatch(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RemovePasswordInputModel} [removePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel?: RemovePasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SetPasswordInputModel} [setPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel?: SetPasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountApiApiAxiosParamCreator(configuration).passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApiApi - factory interface
 * @export
 */
export const AccountApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {ChangeEmailInputModel} [changeEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel?: ChangeEmailInputModel, options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountDatePasswordSetGet(options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountDatePasswordSetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountGet(options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: Array<object>; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountPatch(requestBody?: { [key: string]: Array<object>; }, options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountPatch(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RemovePasswordInputModel} [removePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel?: RemovePasswordInputModel, options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetPasswordInputModel} [setPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel?: SetPasswordInputModel, options?: any): AxiosPromise<void> {
            return AccountApiApiFp(configuration).passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApiApi - object-oriented interface
 * @export
 * @class AccountApiApi
 * @extends {BaseAPI}
 */
export class AccountApiApi extends BaseAPI {
    /**
     * 
     * @param {ChangeEmailInputModel} [changeEmailInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel?: ChangeEmailInputModel, options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountChangeEmailPost(changeEmailInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountDatePasswordSetGet(options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountDatePasswordSetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountGet(options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: Array<object>; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountPatch(requestBody?: { [key: string]: Array<object>; }, options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountPatch(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RemovePasswordInputModel} [removePasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel?: RemovePasswordInputModel, options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountRemovePasswordPost(removePasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SetPasswordInputModel} [setPasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiApi
     */
    public passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel?: SetPasswordInputModel, options?: any) {
        return AccountApiApiFp(this.configuration).passwordlessApiV1MyAccountSetPasswordPost(setPasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} longCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinLongCodeGet: async (longCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'longCode' is not null or undefined
            if (longCode === null || longCode === undefined) {
                throw new RequiredError('longCode','Required parameter longCode was null or undefined when calling signinLongCodeGet.');
            }
            const localVarPath = `/signin/{longCode}`
                .replace(`{${"longCode"}}`, encodeURIComponent(String(longCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} longCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signinLongCodeGet(longCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).signinLongCodeGet(longCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} longCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinLongCodeGet(longCode: string, options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).signinLongCodeGet(longCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {string} longCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signinLongCodeGet(longCode: string, options?: any) {
        return AuthApiFp(this.configuration).signinLongCodeGet(longCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticateApiApi - axios parameter creator
 * @export
 */
export const AuthenticateApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateLongCodeInputModel} [authenticateLongCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticateLongCodePost: async (authenticateLongCodeInputModel?: AuthenticateLongCodeInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/authenticate-long-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof authenticateLongCodeInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(authenticateLongCodeInputModel !== undefined ? authenticateLongCodeInputModel : {})
                : (authenticateLongCodeInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthenticateInputModel} [authenticateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticateOneTimeCodePost: async (authenticateInputModel?: AuthenticateInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/authenticate-one-time-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof authenticateInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(authenticateInputModel !== undefined ? authenticateInputModel : {})
                : (authenticateInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticatePasswordPost: async (authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/authenticate-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof authenticatePasswordInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(authenticatePasswordInputModel !== undefined ? authenticatePasswordInputModel : {})
                : (authenticatePasswordInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticatePost: async (authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof authenticatePasswordInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(authenticatePasswordInputModel !== undefined ? authenticatePasswordInputModel : {})
                : (authenticatePasswordInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterInputModel} [registerInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1RegisterPost: async (registerInputModel?: RegisterInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof registerInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(registerInputModel !== undefined ? registerInputModel : {})
                : (registerInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendCodeInputModel} [sendCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SendOneTimeCodePost: async (sendCodeInputModel?: SendCodeInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/send-one-time-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof sendCodeInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(sendCodeInputModel !== undefined ? sendCodeInputModel : {})
                : (sendCodeInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendPasswordResetMessageInputModel} [sendPasswordResetMessageInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SendPasswordResetMessagePost: async (sendPasswordResetMessageInputModel?: SendPasswordResetMessageInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/send-password-reset-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof sendPasswordResetMessageInputModel !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(sendPasswordResetMessageInputModel !== undefined ? sendPasswordResetMessageInputModel : {})
                : (sendPasswordResetMessageInputModel || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SignOutPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordless-api/v1/sign-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticateApiApi - functional programming interface
 * @export
 */
export const AuthenticateApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateLongCodeInputModel} [authenticateLongCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel?: AuthenticateLongCodeInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AuthenticateInputModel} [authenticateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel?: AuthenticateInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RegisterInputModel} [registerInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1RegisterPost(registerInputModel?: RegisterInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1RegisterPost(registerInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SendCodeInputModel} [sendCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel?: SendCodeInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SendPasswordResetMessageInputModel} [sendPasswordResetMessageInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel?: SendPasswordResetMessageInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordlessApiV1SignOutPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticateApiApiAxiosParamCreator(configuration).passwordlessApiV1SignOutPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticateApiApi - factory interface
 * @export
 */
export const AuthenticateApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AuthenticateLongCodeInputModel} [authenticateLongCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel?: AuthenticateLongCodeInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthenticateInputModel} [authenticateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel?: AuthenticateInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterInputModel} [registerInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1RegisterPost(registerInputModel?: RegisterInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1RegisterPost(registerInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendCodeInputModel} [sendCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel?: SendCodeInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendPasswordResetMessageInputModel} [sendPasswordResetMessageInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel?: SendPasswordResetMessageInputModel, options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordlessApiV1SignOutPost(options?: any): AxiosPromise<void> {
            return AuthenticateApiApiFp(configuration).passwordlessApiV1SignOutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticateApiApi - object-oriented interface
 * @export
 * @class AuthenticateApiApi
 * @extends {BaseAPI}
 */
export class AuthenticateApiApi extends BaseAPI {
    /**
     * 
     * @param {AuthenticateLongCodeInputModel} [authenticateLongCodeInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel?: AuthenticateLongCodeInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1AuthenticateLongCodePost(authenticateLongCodeInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthenticateInputModel} [authenticateInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel?: AuthenticateInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1AuthenticateOneTimeCodePost(authenticateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1AuthenticatePasswordPost(authenticatePasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthenticatePasswordInputModel} [authenticatePasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel?: AuthenticatePasswordInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1AuthenticatePost(authenticatePasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterInputModel} [registerInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1RegisterPost(registerInputModel?: RegisterInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1RegisterPost(registerInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendCodeInputModel} [sendCodeInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel?: SendCodeInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1SendOneTimeCodePost(sendCodeInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendPasswordResetMessageInputModel} [sendPasswordResetMessageInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel?: SendPasswordResetMessageInputModel, options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1SendPasswordResetMessagePost(sendPasswordResetMessageInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApiApi
     */
    public passwordlessApiV1SignOutPost(options?: any) {
        return AuthenticateApiApiFp(this.configuration).passwordlessApiV1SignOutPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProtectedInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/protected-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppInfo>> {
            const localVarAxiosArgs = await DataApiAxiosParamCreator(configuration).apiAppInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProtectedInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DataApiAxiosParamCreator(configuration).apiProtectedInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppInfoGet(options?: any): AxiosPromise<AppInfo> {
            return DataApiFp(configuration).apiAppInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProtectedInfoGet(options?: any): AxiosPromise<void> {
            return DataApiFp(configuration).apiProtectedInfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiAppInfoGet(options?: any) {
        return DataApiFp(this.configuration).apiAppInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiProtectedInfoGet(options?: any) {
        return DataApiFp(this.configuration).apiProtectedInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}


